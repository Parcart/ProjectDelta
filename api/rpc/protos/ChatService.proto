syntax = "proto3";

import "google/protobuf/timestamp.proto";


/*
   * Данное описание актуально для версии 0.6-dev1
   * Общее исключение для значения ("authorization", token) в Metadata
   * grpc.StatusCode.UNAUTHENTICATED, "Invalid signature" - Если отправленный токен не является действительным.
 */
service GigaChatService {
  /*
   * metadata (("authorization", token))
   * При открытии соединения пользователь отправляет объект ничего,
   * в ответ получает трансляцию новых сообщений.
   * Ответ:
   *      Если сообщение успешно отправлено, оно будет возращено.
   *      Если бот ответил на сообщения пользователя, то оно будет возвращено
   */
  rpc messageStream(Nothing) returns (stream Message);
  /*
   * metadata (("authorization", token), ("dialogue_id", dialogue_id))
   * Соединение служит для транслирования звука на сервер для отправки нового сообщения в диалог.
   * Ответ:
   *      Если сервер успешно сохранил ваше голосовое сообщение, то вы получите id диалога и id сообщения
   * Исключения:
   *      grpc.StatusCode.ABORTED "Metadata invalide!"
   *      grpc.StatusCode.ABORTED, "DBerror: DialogueVoice POST failed"
   *      grpc.StatusCode.ABORTED, "DBerror: DialogueMessage POST failed"
   */
  rpc uploadVoiceMessage(stream VoiceMessage) returns (DialogMessage);
  /*
   * metadata (("authorization", token))
   * Соединение служит для транслирования звука с сервера на клиент для получения голосового сообщения.
   * Ответ:
   *      Если сообщение было найдено на сервере, вы получите трансляцию звука. (1024 byte файла)
   * Исключения:
   *      grpc.StatusCode.ABORTED, "BackendError: Voice_message not found!" - Не удалось найти файл на сервере.
   *      grpc.StatusCode.DATA_LOSS, "DataError: Message field voice_info not found!" - В отправленном сообщении отсутствует ссылка на файл
   */
  rpc downloadVoiceMessage(DialogMessage) returns (stream VoiceMessage);
  /* Метод создания нового диалога, используется бэком, при создании диалога, с фронта не вызывается */
  rpc createNewDialogue(DialogueMode) returns (DialogueID);
  /* Метод для отправки событий */
  rpc sendEvent(Events) returns (EventSendResponse);


}

message Nothing {}

message Events {
  oneof event {
    /* id нажатой кнопки */
    int64 press_button = 1;
    bool finish_dialogue = 2;
    bool continue_dialogue = 3;
  }
  int64 dialogue_id = 6;
}

message EventSendResponse {
  int32 status = 1;
}

message DialogueID {
  int64 id = 1;
}
enum DialogueModeType {
  train_rule = 0;
  train_mistake = 1;
  onboarding = 2;
  open_dialogue = 3;
}

enum DifficultDialogue{
  easy = 0;
  hard = 1;
}

message DialogueMode {
  string name = 1;
  DialogueModeType mode = 2;
  optional int64 reference_id = 3;
  DifficultDialogue difficulty = 4;
  bool mistakes = 5;
}

message CreateDialogue {
  string name = 1;
  DialogueMode mode = 2;
}

message NewDialogue {
  int64 dialogue_id = 1;
}

message DialogueStarted {
  bool is_started = 1;
}

message DialogMessage{
  int64 dialogue_id = 1;
  int64 message_id = 2;
}


// dict[dialogue_id, last_message_id]
message DialoguesInfo {
   map<int64, int64> info = 1;
}


enum SenderType {
  USER = 0;
  BOT = 1;
}

message Message {
  int64 dialogue_id = 1;
  int64 message_id = 2;
  SenderType sender  = 3;
  Content content = 4;
  google.protobuf.Timestamp timestamp = 5;
}

message Content {
  ContentType content_type = 1;
  optional ContentData content = 2;
}

enum ContentType {
  TEXT_MESSAGE = 0;
  VOICE_MESSAGE = 1;
  DIALOGUE_END = 2;
  DIALOGUE_NAME = 3;
}

message ReplyKeyboardButton{
  int64 button_id = 1;
  string text = 2;
  bool is_tapped = 3;
  bool is_disabled = 4;
}

message ContentData{
  optional VoiceMessageInfo voice_info = 1;
  optional string text = 2;
  optional string translate_text = 3;
  repeated ReplyKeyboardButton buttons = 4;
}


message VoiceMessageInfo {
  int64 voice_data_id = 1;
  string sound_wave = 2;
  float duration = 3;
}

message VoiceMessage {
  bytes content = 1;
}

message HistorySettings {
  int64 message_id = 1;
}



